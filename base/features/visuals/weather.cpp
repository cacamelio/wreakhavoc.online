#include "visuals.h"
#include "../misc/logger.h"

void CWeather::Main( ) {
	static bool fuck{ };
	if ( !ctx.m_pLocal ) {
	RETURN:
		if ( fuck ) {
			CleanUp( );
			fuck = false;
		}

		return;
	}

	switch ( Config::Get< int >( Vars.VisWorldWeather ) ) {
	case 0:
	default:
		goto RETURN;
	case 1:
		RemoveUnusedEntities( PRECIPITATION_TYPE_RAIN );
		if ( IsTypeActive( PRECIPITATION_TYPE_RAIN ) )
			return;

		AppleWeatherEffect( PRECIPITATION_TYPE_RAIN );
		break;
	case 2:
		RemoveUnusedEntities( PRECIPITATION_TYPE_SNOW );
		if ( IsTypeActive( PRECIPITATION_TYPE_SNOW ) )
			return;

		AppleWeatherEffect( PRECIPITATION_TYPE_SNOW );
		break;
	case 3:
		RemoveUnusedEntities( PRECIPITATION_TYPE_PARTICLERAIN );
		if ( IsTypeActive( PRECIPITATION_TYPE_PARTICLERAIN ) )
			return;

		AppleWeatherEffect( PRECIPITATION_TYPE_PARTICLERAIN );
		break;
	case 4:
		RemoveUnusedEntities( PRECIPITATION_TYPE_PARTICLESNOW );
		if ( IsTypeActive( PRECIPITATION_TYPE_PARTICLESNOW ) )
			return;

		AppleWeatherEffect( PRECIPITATION_TYPE_PARTICLESNOW );
		break;
	case 5:
		RemoveUnusedEntities( PRECIPITATION_TYPE_PARTICLERAINSTORM );
		if ( IsTypeActive( PRECIPITATION_TYPE_PARTICLERAINSTORM ) )
			return;

		AppleWeatherEffect( PRECIPITATION_TYPE_PARTICLERAINSTORM );
		break;
	}

	fuck = true;

	if ( m_vecPrecipitationList.size( ) ) {
		for ( auto it : m_vecPrecipitationList ) {
			const auto eyePos{ ctx.m_pLocal->GetAbsOrigin( ) + ctx.m_pLocal->m_vecViewOffset( ) };
			auto new_mins{ eyePos + it.m_vecMins };
			auto new_maxs{ eyePos + it.m_vecMaxs };

			//it.m_pEntity->GetCollideable( )->OBBMins( ) = new_mins;
			//it.m_pEntity->GetCollideable( )->OBBMaxs( ) = new_maxs;

			auto* coll = it.m_pEntity->GetCollideable( );
			//coll->OBBMins( ) = new_mins;
			//coll->OBBMaxs( ) = new_maxs;
		}
	}
}


// How many bits to use to encode an edict.
#define MAX_EDICT_BITS              11          // # of bits needed to represent max edicts
// Max # of edicts in a level
#define MAX_EDICTS                  (1<<MAX_EDICT_BITS)

void CWeather::CreatePrecipEntity( PrecipitationEntity_t* ent_info, EPrecipitationType precip_mode ) {
	static unsigned char collide_data[ ] = {
	0xB8, 0x01, 0x00, 0x00, 0x56, 0x50, 0x48, 0x59, 0x00,
	0x01, 0x00, 0x00, 0x9C, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80,
	0x3F, 0x00, 0x00, 0x00, 0x00, 0x20, 0x16, 0x6A, 0xC1,
	0xC0, 0x0E, 0x1C, 0xC1, 0x80, 0x13, 0xD0, 0x3F, 0xE2,
	0x26, 0x11, 0x48, 0xE2, 0x26, 0x11, 0x48, 0xE2, 0x26,
	0x11, 0x48, 0x72, 0x4E, 0x08, 0x44, 0xD1, 0x9C, 0x01,
	0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x56, 0x50, 0x53, 0xD0,
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x15,
	0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
	0x00, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x03, 0x00,
	0x02, 0x00, 0x12, 0x00, 0x01, 0x80, 0x00, 0x00, 0x02,
	0x00, 0xFD, 0x7F, 0x01, 0x00, 0x15, 0x00, 0x03, 0x00,
	0x28, 0x00, 0x02, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x06,
	0x00, 0x04, 0x00, 0x0F, 0x00, 0x01, 0x00, 0xF6, 0x7F,
	0x03, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x05,
	0x00, 0x15, 0x00, 0x04, 0x00, 0xFA, 0x7F, 0x04, 0x70,
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x13,
	0x00, 0x05, 0x00, 0xFA, 0x7F, 0x05, 0x60, 0x00, 0x00,
	0x00, 0x00, 0xEE, 0x7F, 0x02, 0x00, 0x18, 0x00, 0x06,
	0x00, 0xFA, 0x7F, 0x06, 0x50, 0x00, 0x00, 0x01, 0x00,
	0xF1, 0x7F, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0xEB,
	0x7F, 0x07, 0x40, 0x00, 0x00, 0x03, 0x00, 0xFD, 0x7F,
	0x04, 0x00, 0x04, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x08,
	0x10, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00,
	0xFC, 0x7F, 0x04, 0x00, 0xEB, 0x7F, 0x09, 0x00, 0x00,
	0x00, 0x05, 0x00, 0xED, 0x7F, 0x06, 0x00, 0x03, 0x00,
	0x07, 0x00, 0xFA, 0x7F, 0x0A, 0x30, 0x00, 0x00, 0x07,
	0x00, 0xFD, 0x7F, 0x06, 0x00, 0x03, 0x00, 0x03, 0x00,
	0xF4, 0x7F, 0x0B, 0x20, 0x00, 0x00, 0x03, 0x00, 0xFD,
	0x7F, 0x06, 0x00, 0xE8, 0x7F, 0x02, 0x00, 0xD8, 0x7F,
	0x46, 0xAD, 0x9D, 0xC3, 0x1F, 0x0D, 0x9C, 0xC3, 0x80,
	0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0x46, 0xAD,
	0x9D, 0xC3, 0x33, 0x4C, 0x92, 0x43, 0x80, 0xAE, 0xAA,
	0x43, 0x00, 0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3,
	0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3, 0x00,
	0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3, 0x33, 0x4C,
	0x92, 0x43, 0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00, 0x00,
	0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33, 0x4C, 0x92, 0x43,
	0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0xE4,
	0x0B, 0x8F, 0x43, 0x1F, 0x0D, 0x9C, 0xC3, 0x80, 0xAE,
	0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F,
	0x43, 0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3,
	0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33,
	0x4C, 0x92, 0x43, 0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xFE, 0xFF,
	0xFF, 0x20, 0x16, 0x6A, 0xC1, 0xC0, 0x0E, 0x1C, 0xC1,
	0x80, 0x13, 0xD0, 0x3F, 0x72, 0x4E, 0x08, 0x44, 0x8A,
	0x8B, 0x9C, 0x00, 0x73, 0x6F, 0x6C, 0x69, 0x64, 0x20,
	0x7B, 0x0A, 0x22, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x22,
	0x20, 0x22, 0x30, 0x22, 0x0A, 0x22, 0x6D, 0x61, 0x73,
	0x73, 0x22, 0x20, 0x22, 0x35, 0x30, 0x30, 0x30, 0x30,
	0x2E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x0A,
	0x22, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6F, 0x70, 0x22, 0x20, 0x22, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6C, 0x74, 0x22, 0x0A, 0x22, 0x76, 0x6F,
	0x6C, 0x75, 0x6D, 0x65, 0x22, 0x20, 0x22, 0x31, 0x35,
	0x30, 0x38, 0x30, 0x32, 0x33, 0x32, 0x30, 0x35, 0x38,
	0x38, 0x38, 0x30, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x22, 0x0A, 0x7D, 0x0A, 0x00
	};

	static CBaseClient* precipitation_client_class = nullptr;

	if ( !precipitation_client_class )
		for ( auto pclass = Interfaces::Client->GetAllClasses( ); pclass && !precipitation_client_class; pclass = pclass->pNext )
			if ( pclass->nClassID == EClassIndex::CPrecipitation )
				precipitation_client_class = pclass;

	ent_info->m_pNetworkable = ( ( IClientNetworkable * ( * )( int, int ) )precipitation_client_class->pCreateFn )( MAX_EDICTS - 1, 0 );
	if ( !ent_info->m_pNetworkable )
		return;

	if ( !ent_info->m_bCollideInit ) {
		Interfaces::PhysicsCollision->VCollideLoad( &ent_info->m_cCollide, 1, ( const char* ) collide_data, 546, false );
		ent_info->m_bCollideInit = true;
	}

	ent_info->m_pEntity = Interfaces::ClientEntityList->Get< CBaseEntity >( MAX_EDICTS - 1 );

	*( int* ) ( ( uintptr_t ) ent_info->m_pEntity + Displacement::Netvars->m_nPrecipType ) = precip_mode;

	//ent_info->m_pEntity->GetCollideable( )->OBBMins( ) = Vector( -2048.f, -2048.f, -2048.f );
	//ent_info->m_pEntity->GetCollideable( )->OBBMaxs( ) = Vector( 2048.f, 2048.f, 2048.f );

	auto* coll = ent_info->m_pEntity->GetCollideable( );
	//coll->OBBMins( ) = Vector( -64.f, -64.f, -64.f );
	//coll->OBBMaxs( ) = Vector( 64.f, 64.f, 64.f );

	ent_info->m_pEntity->SetModelIndex( ent_info->m_iModelIndex );
	*( bool* ) ( ( DWORD ) ent_info->m_pEntity + 0x000000ED ) = false;

	ent_info->m_pEntity->OnDataChanged( DATA_UPDATE_CREATED );
}

void CWeather::UnloadEntity( PrecipitationEntity_t& precip ) {
	using fn = void( __thiscall* ) ( void* );
	static auto destructor = reinterpret_cast< fn >( MEM::FindPattern( CLIENT_DLL, _( "55 8B EC 51 56 8B F1 8D 45 FC 57" ) ) );

	if ( precip.m_pEntity == nullptr )
		return;

	precip.m_pEntity->SetModelIndex( 0 );
	destructor( precip.m_pEntity );

	//if ( precip.m_bCollideInit )
	//	Interfaces::PhysicsCollision->VCollideUnload( &precip.m_cCollide );
}

void CWeather::RemoveUnusedEntities( EPrecipitationType type ) {
	if ( m_vecPrecipitationList.empty( ) )
		return;

	bool clear = false;
	for ( auto& it : m_vecPrecipitationList ) {
		if ( it.m_pEntity == nullptr )
			continue;

		if ( it.m_iType != type ) {
			UnloadEntity( it );
			clear = true;
		}
	}
	if ( clear ) {
		m_vecPrecipitationList.clear( );
		m_iModelIndexes.clear( );
	}
}

bool CWeather::IsTypeActive( EPrecipitationType type ) {
	for ( auto& it : m_vecPrecipitationList ) {
		if ( it.m_pEntity == nullptr )
			continue;

		if ( it.m_iType == type )
			return true;
	}
	return false;
}

void CWeather::AppleWeatherEffect( EPrecipitationType type ) {
	if ( !ctx.m_pLocal )
		return;

	int mdl_index = 0x7FF;
	if ( !m_iModelIndexes.empty( ) ) {
		int v11 = 0x7FF;
		while ( 1 ) {
			auto begin = m_iModelIndexes.begin( );
			if ( m_iModelIndexes.empty( ) )
				break;
			while ( *begin != mdl_index ) {
				if ( ++begin == m_iModelIndexes.end( ) )
					goto LABEL_7;
			}
			if ( begin == m_iModelIndexes.end( ) )
				break;
			--mdl_index;
		}
	LABEL_7:
		v11 = mdl_index;
	}

	//for ( int i = 0; i < 3; i++ ) {
	PrecipitationEntity_t& precip_ent = m_vecPrecipitationList.emplace_back( );
	precip_ent.m_vecMins = Vector( -2048.f, -2048.f, -2048.f );
	precip_ent.m_vecMaxs = Vector( 2048.f, 2048.f, 2048.f );
	precip_ent.m_bCollideInit = false;
	precip_ent.m_iModelIndex = mdl_index - 0x800;
	precip_ent.m_iAbsModelIndex = mdl_index;
	memset( &precip_ent.m_cCollide, 0, sizeof( precip_ent.m_cCollide ) );

	precip_ent.m_iType = type;

	CreatePrecipEntity( &precip_ent, type );
}

// --------------------------------------------------------------------------------------------
// public methods
// --------------------------------------------------------------------------------------------

void CWeather::CleanUp( ) {
	if ( m_vecPrecipitationList.empty( ) )
		return;

	Interfaces::Engine->ExecuteClientCmd( _( "stopsound" ) );

	for ( auto& it : m_vecPrecipitationList ) {
		UnloadEntity( it );
		it.m_pEntity = nullptr;
	}
	if ( !m_vecPrecipitationList.empty( ) )
		m_vecPrecipitationList.clear( );

	if ( !m_iModelIndexes.empty( ) )
		m_iModelIndexes.clear( );
}